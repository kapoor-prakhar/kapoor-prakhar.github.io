{"version":3,"sources":["Actions/Types.js","Reducers/Contacts.js","Reducers/index.js","Actions/Creators.js","Components/List.jsx","App.js","serviceWorker.js","Components/Contact.jsx","Store/store.js","index.js"],"names":["createTypes","INITIAL_STATE","Immutable","contacts","ACTION_HANDLERS","_ACTION_HANDLERS","Object","defineProperty","Types","ADD_CONTACTS","state","action","merge","concat","toConsumableArray","payload","DELETE_CONTACT","newContacts","i","length","id","push","createReducer","combineReducers","Contacts","Creators","addContacts","type","deleteContact","List","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDelete","e","parseInt","target","renderContacts","bind","assertThisInitialized","nextProps","nextContext","setState","_this2","map","contact","react_default","a","createElement","key","name","phone","onClick","className","react_router_dom","to","Component","connect","ownProps","dispatch","Actions","App","Components_List","Boolean","window","location","hostname","match","Contact","handleNameChange","handlePhoneChange","handleAdd","value","saveContact","history","_this$state","required","onChange","initialState","ownProp","store","createStore","rootReducer","ReactDOM","render","es","react_router","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff3bb7be.chunk.js","sourcesContent":["import { createTypes } from 'reduxsauce';\r\n\r\nexport default createTypes(`\r\n    ADD_CONTACTS\r\n    DELETE_CONTACT\r\n`)","import Types from '../Actions/Types';\r\nimport Immutable from 'seamless-immutable';\r\nimport { createReducer } from 'reduxsauce';\r\n\r\nexport const INITIAL_STATE = Immutable({\r\n    contacts: []\r\n});\r\n\r\nconst contactsAdd = (state, action) => {\r\n    return state.merge({\r\n        contacts: [...state.contacts, action.payload]\r\n    })\r\n};\r\n\r\nconst contactDelete = (state, action) => {\r\n    const newContacts = [];\r\n    for(let i=0; i<state.contacts.length; i++) {\r\n        if(action.id == i) continue;\r\n        newContacts.push(state.contacts[i]);\r\n    }\r\n\r\n    return state.merge({\r\n        contacts: newContacts\r\n    })\r\n};\r\n\r\nconst ACTION_HANDLERS = {\r\n  [Types.ADD_CONTACTS]: contactsAdd,\r\n    [Types.DELETE_CONTACT]: contactDelete\r\n};\r\n\r\nexport default createReducer(INITIAL_STATE, ACTION_HANDLERS);","import {combineReducers} from 'redux';\r\nimport Contacts from './Contacts'\r\n\r\nexport default combineReducers({\r\n    Contacts\r\n});","import Types from './Types';\r\n\r\nconst addContacts = (payload) => {\r\n  return ({\r\n      type: Types.ADD_CONTACTS,\r\n      payload\r\n  })\r\n};\r\n\r\nconst deleteContact = (id) => {\r\n    return ({\r\n        type: Types.DELETE_CONTACT,\r\n        id\r\n    });\r\n};\r\n\r\nexport default {\r\n    addContacts,\r\n    deleteContact\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Actions from  '../Actions/Creators';\r\n\r\nclass List extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            contacts: this.props.contacts\r\n        };\r\n\r\n        this.renderContacts = this.renderContacts.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        this.setState({contacts: nextProps.contacts});\r\n        this.renderContacts();\r\n    }\r\n\r\n    handleDelete = (e) => {\r\n        this.props.deleteContact(parseInt(e.target.id));\r\n    };\r\n\r\n    renderContacts(){\r\n        const {contacts} = this.state;\r\n        let i = -1;\r\n        return contacts.map(contact => {\r\n            ++i;\r\n            return (\r\n                <tr key={i}>\r\n                    <td>{contact.name}</td>\r\n                    <td>{contact.phone}</td>\r\n                    <td>\r\n                        <button key={i} id={i} onClick={this.handleDelete} className={'btn btn-danger'}>Delete</button>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'container'}>\r\n                <br/>\r\n                <Link to={'/add'} className={'btn btn-lg btn-block btn-success'}>Click Here to Add Contacts</Link>\r\n                <br/>\r\n                <table className={'table'}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Phone</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.renderContacts()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps){\r\n    return {\r\n        contacts: state.Contacts.contacts\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        deleteContact: (id) => {\r\n            dispatch(Actions.deleteContact(id));\r\n        }\r\n    };\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","import React, { Component } from 'react';\nimport List from './Components/List';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <List/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nimport  {connect} from 'react-redux';\r\nimport Actions from  '../Actions/Creators';\r\n\r\nclass Contact extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            phone: \"\"\r\n        };\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handlePhoneChange = this.handlePhoneChange.bind(this);\r\n        this.handleAdd = this.handleAdd.bind(this);\r\n    }\r\n\r\n    handleNameChange(e){\r\n\r\n        this.setState({name: e.target.value});\r\n    }\r\n\r\n    handlePhoneChange(e){\r\n        this.setState({phone: e.target.value});\r\n    }\r\n\r\n    handleAdd(){\r\n        const payload = {\r\n            name: this.state.name,\r\n            phone: this.state.phone\r\n        };\r\n\r\n        this.props.saveContact(payload);\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render(){\r\n        const {name, phone} = this.state;\r\n        return (\r\n            <div className={'container'}>\r\n                <br/>\r\n                <form className={'form'}>\r\n                    <div className={'form-group'}>\r\n                        <label>\r\n                            Name:\r\n                        </label> &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <input type=\"text\" required={true} value={name} onChange={this.handleNameChange}/>\r\n                    </div>\r\n                    <div className={'form-group'}>\r\n                        <label>\r\n                            Phone\r\n                        </label> &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <input type={'text'} value={phone} onChange={this.handlePhoneChange} name={'phone'}/>\r\n                    </div>\r\n                    <div className={'form-group'}>\r\n                        <button type={'button'} className={'btn btn-primary'} onClick={this.handleAdd}>Add</button>\r\n                    </div>\r\n                </form>\r\n\r\n                <div className={'container-fluid'}>\r\n                    <p>Name: {this.state.name}</p>\r\n                    <p>Contact: {this.state.phone}</p>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProp) {\r\n    return {};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        saveContact: (payload) => {\r\n            dispatch(Actions.addContacts(payload));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contact);","import { createStore } from 'redux';\r\nimport rootReducer from '../Reducers';\r\n\r\nexport default function configureStore(initialState) {\r\n    return createStore(rootReducer, initialState);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './Store/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Contact from './Components/Contact';\n\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <div>\n                <Switch>\n                    <Route path={\"/add\"} component={Contact} />\n                    <Route path={\"/\"} component={App} />\n                </Switch>\n            </div>\n        </BrowserRouter>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}